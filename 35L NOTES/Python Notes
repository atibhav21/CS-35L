Compiled and interpreted
	Python code is compiled to bytecode
	Bytecode interpreted by Python interpreter

Python List
	mutable (dynamic)
	can hold objects of different data types
	element access: list_name[index]
	eg. t = [123, 3.0, ‘hello!’]
	Use + operator to merge lists

Python Dictionary
	- Works like a map
	- provides key-value pair
	- dict = {} to create a new dictionary
	- keys have to be unique

eg. 
dict = {}
dict[‘hello’] = “world”
print dict[‘hello’]
World

dict[‘power’] = 9001
if (dict[‘power’] > 9000):
 	print “Its over “, dict[‘power’]
Its over 9001

del dict[‘hello’]
del dict

list = [‘Mary’, ‘had’, ‘a’, ‘little’, ‘lamb’]
for i in list:
	print i

Prints out all elements each on a new line

eg. Python code

#!/usr/bin/python 

import random, sys
from optparse import OptionParser  

class randline: 
	def __init__(self, filename): 
		f = open (filename, 'r') 
		self.lines = f.readlines() 
		f.close () 

	def chooseline(self): 
		return random.choice(self.lines)
 	 

def main(): 
    version_msg = "%prog 2.0" 
    usage_msg = """%prog [OPTION]...
FILE Output randomly selected lines from FILE.""" 

parser = OptionParser(version=version_msg, usage=usage_msg) 
parser.add_option("-n", "--numlines",action="store", dest="numlines",default=1, help="output NUMLINES lines (default 1)") 

options, args = parser.parse_args(sys.argv[1:]) 

try: 
    numlines = int(options.numlines) 
except: 
    parser.error("invalid NUMLINES: {0}". format(options.numlines)) 
if numlines < 0: 
    parser.error("negative count: {0}".format(numlines)) 
if len(args) != 1: 
    parser.error("wrong number of operands") 
input_file = args[0] 
try: 
    generator = randline(input_file) 
    for index in range(numlines):
        sys.stdout.write(generator.chooseline()) 
except IOError as (errno, strerror): 
    parser.error("I/O error({0}): {1}". format(errno, strerror)) 

if __name__ == "__main__":
    main()

