I experienced in error with the read function in the tr2u.c file. I thought that the file returns a non-zero number if it encounters an error. However, I didn't realize that it returns a value of 
0 when the end of the file is reached. Other than that, writing tr2u.c and tr2b.c weren't too hard.

Pseudocode:

If number of operands is not 3:
	exit
If length of two operands is not same:
	exit
If any duplicates in from string:
	exit
While there are characters in stdin:
	read a character
	if its present in from string:
		output corresponding character from to string
	else
		output character as it is


I used the command:
head --bytes=5000000 /dev/urandom > output.txt
to get a file of 5 million bytes

./tr2b "ABCDEF" "JKLMNO" < output.txt > tr2bOutput.txt
./tr2u "ABCDEF" "JKLMNO" < output.txt > tr2uOutput.txt

Strace Comparison:
Data Size: 5 million bytes

Strace to Termial:

tr2b:

strace -c -o strace_output ./tr2b "ABCDEF" "JKLMNO" < output.txt

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 95.52    0.001492           0     20083           write
  4.48    0.000070           1        79           read
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         4           fstat
  0.00    0.000000           0        10           mmap
  0.00    0.000000           0         3           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.001562                 20188         1 total

As we can see from this data, 20,000+ write calls were made for only 79 read calls. 

tr2u: 
strace -o strace_output2 ./tr2u "ABCDEF" "JKLMNO" < output.txt

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 55.70    0.400861           0   5000001         1 write
 44.30    0.318760           0   5000002           read
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         8           mmap
  0.00    0.000000           0         3           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.719621              10000025         2 total

As we can see from this data, a read operation was performed for every almost every write operation.

Strace to file:

tr2b:
strace -c -o strace_output ./tr2b "ABCDEF" "JKLMNO" < output.txt > strace_buf_output

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 68.89    0.000031           0        79           read
 31.11    0.000014           4         4           fstat
  0.00    0.000000           0        77           write
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0        10           mmap
  0.00    0.000000           0         3           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.000045                   182         1 total

The number of calls when writing to a file is way lesser than the number of calls made when writing to the terminal

tr2u:
strace -c -o strace_output2 ./tr2u "ABCDEF" "JKLMNO" < output.txt > strace_unbuf_output2

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 57.42    0.808177           0   5000000           write
 42.58    0.599345           0   5000002           read
  0.00    0.000000           0         2           open
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         8           mmap
  0.00    0.000000           0         3           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         1         1 access
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    1.407522              10000024         1 total

In this case, the number of calls made is almost equal.

Hence, buffered I/O is faster.

Time Differences:

When writing to a file:

for tr2b:
real	0m0.320s
user	0m0.248s
sys		0m0.003s

for tr2u:
real	0m5.689s
user	0m0.375s
sys		0m5.168s

As we can see from this, the unbuffered I/O takes almost 5.3s more than the buffered I/O. This was performed on a 2.9GHz processor, so in terms of number of system calls made, the number of 
calls made by the unbuffered I/O is way more than the number of calls made by the buffered I/O. The data size was 5 million bytes.

When writing to stdout:

for tr2b:
real	0m1.222s
user	0m0.439s
sys		0m0.122s

for tr2u:
real	0m7.232s
user	0m0.357s
sys		0m6.869s

The time taken to write to stdout is more in both cases as compared to outputting to a file.

